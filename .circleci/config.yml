version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      bucket_name:
        default: ${WorkflowID}
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${WorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${WorkflowID}"
            echo "Destroy back-end and front-end stacks as stacks did not build correctly"
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      url:
        type: string
        default:
    steps:
      - run:
          name: Revert migrations
          command: |
            export RESULT=$(curl -H "token: c4893bca-128d-471f-b395-90d096b5f429" --request GET https://api.memstash.io/values/backend-${CIRCLE_WORKFLOW_ID:0:7}-migration)
            echo $RESULT
            if(( $RESULT=="bad")); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/Web-Application-Auto-Deploy/frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ~/Web-Application-Auto-Deploy/backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend-build
          command: |
            cd ~/Web-Application-Auto-Deploy/frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backtend-build]
      - run:
          name: Test backend-build
          command: |
            cd ~/Web-Application-Auto-Deploy/backend          
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      # npm audit fix --audit-level=critical --force
      - run:
          name: Scan audit frontend
          command: |
            cd ~/Web-Application-Auto-Deploy/frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # npm audit fix --audit-level=critical --force
      - run:
          name: Scan audit backend
          command: |
            cd ~/Web-Application-Auto-Deploy/backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: yum install tar gzip
          command: |
            yum update -y && yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="CI-${CIRCLE_WORKFLOW_ID:0:7}"
              echo "backend stack WorkflowID:"
              echo $WorkflowID
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=uda-people \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="CI-${CIRCLE_WORKFLOW_ID:0:7}"
              echo "bfrontend stack WorkflowID:"
              echo $WorkflowID
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            echo -ne ".us-west-2.compute.amazonaws.com" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - ~/Web-Application-Auto-Deploy.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [""] ### Add fingerprints
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - run:
          name: Get WorkflowID
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      = destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [""] ### Add fingerprints
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            npm run build
            npm run migrations
            echo "good" > ~/migration.txt
      - run:
          name: Send migration results to memstash
          command: |
            OUTPUT=$(cat ~/migration.txt)
            if (( $OUTPUT=="good"))
            then
              curl -H "Content-Type: text/plain" -H "token: c4893bca-128d-471f-b395-90d096b5f429" --request PUT --data "good" https://api.memstash.io/values/backend-${CIRCLE_WORKFLOW_ID:0:7}-migration
              echo "good migration"
            else
              curl -H "Content-Type: text/plain" -H "token: c4893bca-128d-471f-b395-90d096b5f429" --request PUT --data "bad" https://api.memstash.io/values/backend-${CIRCLE_WORKFLOW_ID:0:7}-migration
              echo "bad migration"
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y && yum -y install tar gzip
            npm install
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(cat ~/Web-Application-Auto-Deploy.circleci/ansible/inventory.txt)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL"
      - run:
          name: Deploy frontend objects
          command: |
            npm run build
      - run:
          name: "copy website files to new version S3 bucket"
          command: |
            aws s3 sync .dist/ s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - run:
          name: rollback backend migration
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [""] ### Add fingerprints
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

cleanup:
  docker:
    # Docker image here
  steps:
    # Checkout code from git
    - run:
        name: Get old stack workflow id
        command: |
          # your code here
          export OldWorkflowID="the id here"
          export STACKS=[] #put the list of stacks here
    - run:
        name: Remove old stacks and files
        command: |
          if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
          then
            # your code here
          fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
