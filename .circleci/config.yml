version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      bucket_name:
        default: udapeople-${CIRCLE_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rb "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --force
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            echo "Destroy back-end and front-end stacks as stacks did not build correctly"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. But fail on other test
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export RESULT=$(curl -H "token: c4893bca-128d-471f-b395-90d096b5f429" --request GET https://api.memstash.io/values/backend-${CIRCLE_WORKFLOW_ID:0:7}-migration)
            echo $RESULT
            if(( $RESULT==1)); 
            then
              cd backend
              npm audit fix --audit-level=critical
              npm run migrations:revert
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            ls -al
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            ls -al
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend-build
          command: |
            cd frontend
            npm i oauth-sign
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backtend-build]
      - run:
          name: Test backend-build
          command: |
            cd backend 
            npm i jest      
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan audit frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan audit backend
          command: |
            cd backend
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=uda-people \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances  \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["71:3c:62:1f:3c:5b:e7:da:d5:cd:e1:fe:33:d3:6f:0b"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssl
            apk add --no-cache python3 py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install awscli \
              && rm -rf /var/cache/apk/*
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["71:3c:62:1f:3c:5b:e7:da:d5:cd:e1:fe:33:d3:6f:0b"]
      - run:
          name: Add Environment variables to .env file
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}"
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}"
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}"
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
      - run:
          name: Run migrations
          command: |
            mkdir /tmp/workspace
            cd backend
            npm i
            npm i jest 
            npm run build
            npm run migrations > /tmp/workspace/migration.txt
            tar -zcvf /tmp/workspace/backend.tar.gz ./dist
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - migration.txt
            - backend.tar.gz
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Send migration results to memstash
          command: |
            if grep "has been executed successfully\|No migrations are pending" /tmp/workspace/migration.txt
            then
              curl -H "Content-Type: text/plain" -H "token: c4893bca-128d-471f-b395-90d096b5f429" --request PUT --data "1" https://api.memstash.io/values/backend-${CIRCLE_WORKFLOW_ID:0:7}-migration
              echo "good migration"
            else
              curl -H "Content-Type: text/plain" -H "token: c4893bca-128d-471f-b395-90d096b5f429" --request PUT --data "0" https://api.memstash.io/values/backend-${CIRCLE_WORKFLOW_ID:0:7}-migration
              echo "bad migration"
            fi
      - run:
          name: Revert failed migration
          command: |
            export RESULT=$(curl -H "token: c4893bca-128d-471f-b395-90d096b5f429" --request GET https://api.memstash.io/values/backend-${CIRCLE_WORKFLOW_ID:0:7}-migration)
            if(( $RESULT==0)); 
            then
              cd backend
              npm install
              npm install jest
              npm audit fix
              npm run migrations:revert
              exit 1
            fi

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: |
            apk add --update tar gzip nodejs npm openssh-client bash 
            pip install awscli
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: .
      - run:
          name: Get backend URL
          command: |
            BACKEND_IP=$(cat .circleci/ansible/inventory.txt | tail -1)
            echo "BACKEND_IP: ${BACKEND_IP}"
            export API_URL="https://${BACKEND_IP}:3030"
            echo $API_URL
            echo $API_URL > ~/api_url.txt
            echo "API_URL=${API_URL}" >> frontend/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - api_url.txt
      - run:
          name: rebuild build frontend
          command: |
            cat frontend/.env
            npm install webpack-dev-server -g
            cd frontend
            npm audit fix --audit-level=critical
            npm run build
      - run:
          name: "copy website files to new version S3 bucket"
          command: |
            aws s3 sync ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["71:3c:62:1f:3c:5b:e7:da:d5:cd:e1:fe:33:d3:6f:0b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip nodejs npm curl bash
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances  \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # - revert-migrations
      # - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar gzip
            pip3 install --upgrade pip \
            && pip3 install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test
          command: |
            BACKEND_URL=$(cat ~/api_url.txt)
            echo "${BACKEND_URL}/api/status"
            if curl -s --head "${BACKEND_URL}/api/status"
            then
              return 0
              echo "passed backend smoke test"
            else
              echo "failed backend smoke test"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            echo weblink: $URL
            if curl -s $URL | grep "Welcome"
            then
              echo "Passed frontend smoke test"
            else
              echo "Failed frontend smoke test"
              exit 1
            fi
      # - destroy-environment
      # - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" \
            --region us-west-2 --no-paginate --output text)

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status=filter CREATE_COMPLETE --no-paginate --output text)

            echo $OldWorkflowID > OldWorkID.txt

            echo $OldWorkflowID

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            --tags project=udapeople
      - persist_to_workspace:
          root: .
          paths:
            - OldWorkID.txt
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            OldWorkflowID=$(cat OldWorkID.txt)
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then 
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
